#include<bits/stdc++.h>
using namespace std;
vector<int>par;
vector<int>size;
int find(int i)
{
    if(par[i]==i)
    {
        return i;
    }
    par[i]=find(par[i]);
    return par[i];
}
void unite(int p1,int p2)
{
    if(size[p1]<size[p2])
    {
        par[p1]=p2;
        size[p2]+=size[p1];
    }
    else
    {
        par[p2]=p1;
        size[p1]+=size[p2];
    }
}
int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial)
{
    int n=graph.size();
    par.resize(n);
    size.resize(n,1);
    for(int i=0;i<n;i++)
    {
        par[i]=i;
    }
    vector<int>each_country_defected_persons(n,0);
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(graph[i][j]==0 or i==j)
            {
                continue;
            }
            int p1=find(i);
            int p2=find(j);
            if(p1!=p2)
            {
                unite(p1,p2);
            }
        }
    } 
    sort(initial.begin(),initial.end());
    for(int insan:initial)
    {
        int name_of_country=find(insan);
        each_country_defected_persons[name_of_country]++;
    }
    int ye_insan_htao=initial[0];
    int max_population_with_only_one_defected_person=0;
    for(int insan:initial)
    {
        int name_of_country =find(insan);
        if(each_country_defected_persons[name_of_country]==1 and size[name_of_country]>max_population_with_only_one_defected_person)
        {
            ye_insan_htao=insan;
            max_population_with_only_one_defected_person=size[name_of_country];
        }

    }
    return ye_insan_htao;


}

int main()
{
    return 0;
}